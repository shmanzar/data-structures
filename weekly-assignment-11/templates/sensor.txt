<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
body {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 5em 2em;
  letter-spacing: -0.011em;
  font-family: "Inter var", sans-serif;
  font-size: 16px;
  color: #34495e;
  background: #f8f9fa;
}
	.title {
		color: #7b2836;
		font-family: "Fira Sans";
		font-weight: 700;
		padding-left: 1%;
	}

table {
  border-collapse: collapse;
}

thead {
  font-size: 0.9em;
  letter-spacing: 0;
  font-weight: 900;
  white-space: nowrap;
  text-align: left;
}

thead th {
  position: sticky;
  top: 0;
  color: #f8f9fa;
  background: #34495e;
  padding: 1em 0.8rem;
}

tbody tr:nth-child(odd) {
  background: #f0f0f3;
}

tbody tr:hover {
  background: #d7ecec;
}

td {
  padding: 0.8em 0.8rem;
}

.number {
  text-align: right;
  font-feature-settings: "tnum" 1;
}
.date {
  text-align: right;
  font-feature-settings: "tnum" 1;
}

tbody .marker {
  font-size: 0.7em;
}

tbody .symbol {
  opacity: 0.6;
}

.centered {
  text-align: center;
}

tbody .text {
  font-size: 0.9em;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
        </style>

        <title>My sensor for the month</title>
    </head>
    <body>
    <h1 class='title'>Apartment's sensor readings</h1>
        <table id="table"></table>

        <script src="https://d3js.org/d3.v6.min.js"></script>
        <script>async function drawTable() {
  // load data
  //const dateParser = d3.timeParse("%Y-%m-%d")
  //const dateAccessor = d => dateParser(d.sensorday) 
  const dateAccessor = d => d.sensorday
  let dataset =  {{{sensordata}}}
  dataset = dataset.sort((a,b) => dateAccessor(a) - dateAccessor(b))

  const table = d3.select("#table")

  //const dateFormat = d => d3.timeFormat("%-m/%d")(dateParser(d))
  //const hourFormat = d => d3.timeFormat("%-I %p")(new Date(d * 1000))
  //const format24HourTime = d => +d3.timeFormat("%H")(new Date(d * 1000))

  const numberOfRows= 60
  const colorScale = d3.interpolateHcl("#a5c3e8", "#efa8a1")
  const grayColorScale = d3.interpolateHcl("#fff", "#bdc4ca")
  const tempScale = d3.scaleLinear()
    .domain(d3.extent(dataset.slice(0, numberOfRows), d => d.tempvalue))
    .range([0, 1])
  const timeScale = d3.scaleLinear()
    .domain([0, 30])
    .range([0, 80])
  const humidityScale = d3.scaleLinear()
    .domain(d3.extent(dataset.slice(0, numberOfRows), d => d.humvalue))
    .range([0, 1])

  const columns = [
    {label: "Day", type: "date", format: d => d.sensorday},
    // {label: "Summary", type: "text", format: d => d.summary},
    {label: "Average Temp", type: "number", format: d => d3.format(".1f")(d.tempvalue), background: d => colorScale(tempScale(d.tempvalue))},
    // {label: "Max Temp Time", type: "marker", format: d => "|", transform: d => `translateX(${timeScale(format24HourTime(d.apparentTemperatureMaxTime))}%)`},
    {label: "Average Humidity", type: "number", format: d => d3.format(".2f")(d.humvalue), background: d => grayColorScale(humidityScale(d.humvalue))},
    // {label: "Did Snow", type: "centered", format: d => d.precipType == "snow" ? "❄" : ""},
    // {label: "Heat Index", type: "symbol", format: d => new Array(+d.heatvalue).fill("✸").join("")},
  ]

  table.append("thead").append("tr")
    .selectAll("thead")
    .data(columns)
    .enter().append("th")
      .text(d => d.label)
      .attr("class", d => d.type)

  const body = table.append("tbody")

  dataset.slice(0, numberOfRows).forEach(d => {
    body.append("tr")
      .selectAll("td")
      .data(columns)
      .enter().append("td")
        .text(column => column.format(d))
        .attr("class", column => column.type)
        .style("background", column => column.background && column.background(d))
        .style("transform", column => column.transform && column.transform(d))
  })
}
drawTable()</script>
    </body>

</html>